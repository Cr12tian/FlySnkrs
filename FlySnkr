import pygame
import random

# Inicializar pygame
pygame.init()

# Dimensiones de la pantalla
SCREEN_WIDTH = 400 
SCREEN_HEIGHT = 600

# Colores
WHITE = (255, 255, 255)
BLUE = (0, 0, 255)
BLACK = (0, 0, 0)

# Crear la pantalla
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
pygame.display.set_caption("Fly Snkrs")

# Cargar imagen de fondo
background_image = pygame.image.load("nike.png")
background_rect = background_image.get_rect()

# Cargar imagen de game over
game_over_image = pygame.image.load("garden.png")

# Reloj para controlar la velocidad de actualización
clock = pygame.time.Clock()

# Cargar fuente de texto
font = pygame.font.Font(None, 40)

# Cargar imagen del pájaro
bird_image = pygame.image.load("off.png")
bird_rect = bird_image.get_rect()
bird_rect.center = (50, SCREEN_HEIGHT // 2)
bird_speed = 1

# Cargar imagen de la tubería
pipe_image = pygame.image.load("cajas.png")
pipe_rect = pipe_image.get_rect()
pipe_x = SCREEN_WIDTH
pipe_height = random.randint(50, SCREEN_HEIGHT - 200)
pipe_gap = 200  # Espacio entre las tuberías
pipe_y = pipe_height + pipe_gap
pipe_speed = 4

# Puntuación
score = 0
best_score = 0

# Cargar la mejor puntuación guardada
def load_best_score():
    try:
        with open("best_score.txt", "r") as file:
            return int(file.read())
    except FileNotFoundError:
        return 0

# Guardar la mejor puntuación
def save_best_score():
    with open("best_score.txt", "w") as file:
        file.write(str(best_score))

# Función para mostrar la puntuación en la pantalla
def show_score():
    score_text = font.render(str(score), True, WHITE)
    score_rect = score_text.get_rect()
    score_rect.center = (SCREEN_WIDTH // 2, 10)
    screen.blit(score_text, score_rect)

# Función para mostrar la mejor puntuación en la pantalla de Game Over
def show_best_score():
    best_score_text = font.render("Mejor Puntuación: " + str(best_score), True, WHITE)
    best_score_rect = best_score_text.get_rect()
    best_score_rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 100)
    screen.blit(best_score_text, best_score_rect)

# Función para mostrar pantalla de fin de juego
def show_game_over():
    screen.blit(background_image, background_rect)
    screen.blit(game_over_image, (0, 0))
    restart_text = font.render("R para reiniciar", True, WHITE)
    restart_rect = restart_text.get_rect()
    restart_rect.center = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2 + 20)
    screen.blit(restart_text, restart_rect)
    show_best_score()

# Función para reiniciar el juego
def restart_game():
    global bird_rect, bird_speed, pipe_x, pipe_height, pipe_y, score, game_over
    bird_rect.center = (50, SCREEN_HEIGHT // 2)
    bird_speed = 0
    pipe_x = SCREEN_WIDTH
    pipe_height = random.randint(50, SCREEN_HEIGHT - 200)
    pipe_y = pipe_height + pipe_gap
    score = 0
    game_over = False

# Bucle principal del juego
running = True
game_over = False

# Cargar la mejor puntuación guardada
best_score = load_best_score()

while running:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            running = False
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not game_over:
                bird_speed = -8
            if event.key == pygame.K_r and game_over:
                restart_game()

    if not game_over:
        # Actualizar posición del pájaro
        bird_rect.y += bird_speed
        bird_speed += 0.5

        # Actualizar posición de la tubería
        pipe_x -= pipe_speed

        # Colisiones con los límites de la pantalla
        if bird_rect.y <= 0 or bird_rect.y >= SCREEN_HEIGHT - bird_rect.height:
            game_over = True

        # Colisiones con las tuberías
        if (
            pipe_x - bird_rect.width < bird_rect.x < pipe_x + pipe_rect.width
            and (bird_rect.y < pipe_height or bird_rect.y + bird_rect.height > pipe_y)
        ):
            game_over = True

        # Pasar una tubería y aumentar la puntuación
        if pipe_x + pipe_rect.width < bird_rect.x:
            score += 1
            if score > best_score:
                best_score = score
            pipe_x = SCREEN_WIDTH
            pipe_height = random.randint(50, SCREEN_HEIGHT - 200)
            pipe_y = pipe_height + pipe_gap

        # Dibujar elementos en la pantalla
        screen.blit(background_image, background_rect)
        screen.blit(bird_image, bird_rect)
        screen.blit(pipe_image, (pipe_x, pipe_y))
        screen.blit(pygame.transform.flip(pipe_image, False, True), (pipe_x, pipe_height - pipe_rect.height))

        show_score()

        # Actualizar la pantalla
        pygame.display.update()

        # Controlar la velocidad de actualización
        clock.tick(60)
    else:
        # Mostrar pantalla de fin de juego
        screen.fill(BLUE)
        show_score()
        show_game_over()
        pygame.display.update()

        while game_over:
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    running = False
                    game_over = False
                if event.type == pygame.KEYDOWN:
                    if event.key == pygame.K_r:
                        restart_game()
                        game_over = False

# Guardar la mejor puntuación
save_best_score()

# Salir del juego
pygame.quit()

   
